/*
 * MailChampApi
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class TemplatesApiController : ControllerBase
    { 
        /// <summary>
        /// Creates a new template.
        /// </summary>
        /// <param name="body"></param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("/Templates")]
        [ValidateModelState]
        [SwaggerOperation("TemplatesPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(Template), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(Models.ProblemDetails), description: "Bad Request")]
        [SwaggerResponse(statusCode: 404, type: typeof(Models.ProblemDetails), description: "Not Found")]
        public virtual IActionResult TemplatesPost([FromBody]TemplateInput body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Template));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ProblemDetails));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ProblemDetails));
            string exampleJson = null;
            exampleJson = "{\n  \"dateCreated\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"templateName\" : \"templateName\",\n  \"dateModified\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"templateId\" : 0,\n  \"content\" : \"content\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Template>(exampleJson)
                        : default(Template);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Updates the content of the selected template.
        /// </summary>
        /// <param name="templateId">The template ID of the template to update.</param>
        /// <param name="body">The new template content.</param>
        /// <response code="200">Success</response>
        /// <response code="404">Not Found</response>
        [HttpPut]
        [Route("/Templates/{templateId}/content")]
        [ValidateModelState]
        [SwaggerOperation("TemplatesTemplateIdContentPut")]
        [SwaggerResponse(statusCode: 200, type: typeof(Template), description: "Success")]
        [SwaggerResponse(statusCode: 404, type: typeof(Models.ProblemDetails), description: "Not Found")]
        public virtual IActionResult TemplatesTemplateIdContentPut([FromRoute][Required]int? templateId, [FromBody]TemplateContentInput body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Template));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ProblemDetails));
            string exampleJson = null;
            exampleJson = "{\n  \"dateCreated\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"templateName\" : \"templateName\",\n  \"dateModified\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"templateId\" : 0,\n  \"content\" : \"content\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Template>(exampleJson)
                        : default(Template);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets the requested template.
        /// </summary>
        /// <param name="templateId"></param>
        /// <response code="200">Success</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/Templates/{templateId}")]
        [ValidateModelState]
        [SwaggerOperation("TemplatesTemplateIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Template), description: "Success")]
        [SwaggerResponse(statusCode: 404, type: typeof(Models.ProblemDetails), description: "Not Found")]
        public virtual IActionResult TemplatesTemplateIdGet([FromRoute][Required]int? templateId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Template));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ProblemDetails));
            string exampleJson = null;
            exampleJson = "{\n  \"dateCreated\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"templateName\" : \"templateName\",\n  \"dateModified\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"templateId\" : 0,\n  \"content\" : \"content\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Template>(exampleJson)
                        : default(Template);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Updates the name of the selected template.
        /// </summary>
        /// <param name="templateId">The template ID of the template to update.</param>
        /// <param name="body">The new template name.</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="404">Not Found</response>
        [HttpPut]
        [Route("/Templates/{templateId}/name")]
        [ValidateModelState]
        [SwaggerOperation("TemplatesTemplateIdNamePut")]
        [SwaggerResponse(statusCode: 200, type: typeof(Template), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(Models.ProblemDetails), description: "Bad Request")]
        [SwaggerResponse(statusCode: 404, type: typeof(Models.ProblemDetails), description: "Not Found")]
        public virtual IActionResult TemplatesTemplateIdNamePut([FromRoute][Required]int? templateId, [FromBody]TemplateNameInput body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Template));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ProblemDetails));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ProblemDetails));
            string exampleJson = null;
            exampleJson = "{\n  \"dateCreated\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"templateName\" : \"templateName\",\n  \"dateModified\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"templateId\" : 0,\n  \"content\" : \"content\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Template>(exampleJson)
                        : default(Template);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
